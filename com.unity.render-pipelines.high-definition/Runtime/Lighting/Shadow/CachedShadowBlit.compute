#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"


#pragma kernel CachedShadowBlit

// We have one thread in flight per destination texel in the dynamic atlas. Ideally we should have a 1:1 mapping, but it might not be the case
// if dynamic array is full and has been rescaled to accommodate.
// Blit is in compute to leverage async compute where supported. 

float4 _SrcRect;
float4 _DstRect;

#define _SrcSize        _SrcRect.zw
#define _SrcOffsetUV    _SrcRect.xy // Offset is in UV
#define _DstSize        (uint2)_DstRect.zw
#define _DstOffsetSS    _DstRect.xy // Offset is in screen space

TEXTURE2D(_CachedShadowmapAtlas);
RW_TEXTURE2D(float, _ShadowmapAtlas);


[numthreads(8, 8, 1)]
void CachedShadowBlit(uint3 dispatchThreadId : SV_DispatchThreadID)
{
    if (all(dispatchThreadId.xy < _DstSize))
    {
        float2 uv = (dispatchThreadId.xy) * rcp(_DstSize);
        uv += _SrcOffsetUV;
        float src = SAMPLE_TEXTURE2D_LOD(_CachedShadowmapAtlas, s_point_clamp_sampler, uv, 0).x;

        uint2 outCoords = dispatchThreadId.xy + _DstOffsetSS;
        _ShadowmapAtlas[outCoords] = src;
    }
}
